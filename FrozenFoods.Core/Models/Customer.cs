//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrozenFoods.Core.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Customer : BaseEntity
    {
       
        public string UserId { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "The characters must be less than 20 characters.")]
        [RegularExpression(@"^[a-zA-Z]*", ErrorMessage = "Only Alphabets are allowed.")]
        public string FirstName { get; set; }

        [Required]
        [StringLength(20, ErrorMessage = "The characters must be less than 20 characters.")]
        [RegularExpression(@"^[a-zA-Z]*", ErrorMessage = "Only Alphabets are allowed.")]
        public string LastName { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string PasswordHash { get; set; }

        [Required]
        [RegularExpression(@"^([0-9]{10})", ErrorMessage = "Invalid Mobile Number.")]
        public string PhoneNumber { get; set; }

        [Required]
        [Display(Name = "Date Of Birth")]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MMM/yyyy}")]
        public System.DateTime DateOfBirth { get; set; }

        [Required]
        public string SecurityQuestion { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "The characters must be less than 30 characters.")]
        public string Answer { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The characters must be less than 100 characters.")]
        public string Address { get; set; }

        [Required]
        [RegularExpression(@"^([0-9]{6})", ErrorMessage = "Invalid Zip Code.")]
        public string ZipCode { get; set; }
        public bool Disable { get; set; }
        public string Image { get; set; }
       
    }
}
